@model List<IS_SISTEMA.models.Groups>
<!DOCTYPE html>
<html>
<head>
    <title>VIKO EIF - Groups</title>
    <style>
        h1 {
            text-align: center;
        }
        ul {
            list-style-type: none;
            margin: 0;
            padding: 0;
            overflow: hidden;
            border: 1px solid #e7e7e7;
            background-color: #f3f3f3;
        }
        li {
            float: left;
        }
        li a {
            display: block;
            color: #666;
            text-align: center;
            padding: 14px 16px;
            text-decoration: none;
        }
        li a:hover:not(.active) {
            background-color: #ddd;
        }
        li a.active {
            color: white;
            background-color: #04AA6D;
        }
        table {
            width: 80%;
            margin: 20px auto;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center;
        }
        th {
            background-color: #f2f2f2;
        }
        tr:hover {
            background-color: #f1f1f1;
        }
         table {
            width: 80%;
            margin: 20px auto;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center;
        }
        th {
            background-color: #f2f2f2;
        }
        tr:hover {
            background-color: #f1f1f1;
        }
           .modal {
            display: none; 
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
            padding-top: 50px;
        }

        .modal-content {
            background-color: #fefefe;
            margin: 5% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 50%;
            max-width: 300px; 
            position: relative; 
        }

        .close {
            position: absolute;
            top: 5px;
            right: 5px;
            color: #aaa;
            font-size: 24px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
        }
        form {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        form div {
            display: flex;
            align-items: center;
            margin-bottom: 12px;
            width: 100%;
        }

        label {
            flex: 0 0 70px;
            text-align: right;
            margin-right: 10px;
        }

        input[type="text"] {
            flex: 1;
            padding: 4px;
            max-width: calc(100% - 80px);
        }

        button[type="submit"] {
            padding: 6px 12px;
            font-size: 14px;
        }
          #studentModal .modal-content {
            background-color: #fefefe;
            margin: 5% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 60%;
            position: relative;
            overflow-x: auto;
        }

        .student-table {
            width: 100%;
            border-collapse: collapse;
        }

        .student-table, .student-table th, .student-table td {
            border: 1px solid #ddd;
            text-align: center;
        }

        .student-table th, .student-table td {
            padding: 8px;
        }

        .student-table th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>
    <h1>VIKO EIF</h1>
    <ul>
        <li><a href="/">Home</a></li>
        <li><a href="/groups" class="active">Groups</a></li>
        <li><a href="/students">Students</a></li>
        <li><a href="/lecturers">Lecturers</a></li>
          <li><a href="/subjects">Subjects</a></li>
    </ul>

      @if (Model == null || !Model.Any())
    {
        <p style="text-align: center;">No groups found.</p>
    }
    else
    {
          <table>
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Shortcut</th>
                    <th>Name</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var group in Model)
                {
                    <tr data-group-id="@group.id" class="group-row">
                        <td>@group.id</td>
                        <td>@group.Shortcut</td>
                        <td>@group.Name</td>
                    </tr>
                }
            </tbody>
        </table>
    }
 
 <button id="openModalBtn">Add New Group</button>

    <div id="myModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <form method="post" action="/api/newgroups">
                <div>
                    <label for="Shortcut">Shortcut:</label>
                    <input type="text" id="Shortcut" name="Shortcut" required>
                </div>
                
                <div>
                    <label for="Name">Name:</label>
                    <input type="text" id="Name" name="Name" required>
                </div>

                <button type="submit">Add Group</button>
            </form>
        </div>
    </div>

  <button id="deleteModalBtn">Delete Group</button>

<div id="deleteModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <form method="post" action="/api/delgroups">
            <div>
                <label for="GroupsId">Group ID:</label>
                <input type="text" id="GroupsId" name="id" required>
            </div>

            <button type="submit" onclick="return confirm('Are you sure you want to delete this group?');">Delete Group</button>
        </form>
    </div>
</div>
<button id="assignStudentBtn">Assign Student to Group</button>

<div id="assignStudentModal" class="modal">
    <div class="modal-content">
        <span class="close-assign">&times;</span>
        <form id="assignStudentForm">
            <div>
                <label for="GroupId">Group ID:</label>
                <input type="text" id="GroupId" name="group_id" required>
            </div>
            <div>
                <label for="StudentId">Student ID:</label>
                <input type="text" id="StudentId" name="student_id" required>
            </div>
            <button type="submit">Assign Student</button>
        </form>
    </div>
</div>
  <div id="studentModal" class="modal">
        <div class="modal-content">
            <span class="close-student">&times;</span>
            <h2>Students in Group</h2>
            <table class="student-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Last Name</th>
                        <th>Phone</th>
                    </tr>
                </thead>
                <tbody id="studentTableBody">
                </tbody>
            </table>
        </div>
    </div>
</body>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const rows = document.querySelectorAll('.group-row');
        
        rows.forEach(function(row) {
            row.addEventListener('click', async function() {
                const groupId = row.getAttribute('data-group-id');


                try {
                    const response = await fetch(`/api/groups/${groupId}/students`);
                    const data = await response.json();

                    console.log(data);

                    const studentTableBody = document.getElementById('studentTableBody');
                    studentTableBody.innerHTML = '';

                    data.forEach(student => {
                        const tr = document.createElement('tr');
                            tr.innerHTML = `
                                <td>${student.id}</td>
                                <td>${student.Name}</td>
                                <td>${student.Lastname}</td>
                                <td>${student.Phone}</td>
                            `;
                            studentTableBody.appendChild(tr);
                        });
                    
                    document.getElementById('studentModal').style.display = 'block';

                        

                    console.log(data);
                } catch (err) {
                    console.log(err);
                }



                
                
                @* fetch(`/api/groups/${groupId}/students`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok ' + response.statusText);
                        }
                        return response.json();
                    })
                    .then(students => {
                        const studentTableBody = document.getElementById('studentTableBody');
                        studentTableBody.innerHTML = '';

                        students.forEach(student => {
                            const tr = document.createElement('tr');
                            tr.innerHTML = `
                                <td>${student.id}</td>
                                <td>${student.name}</td>
                                <td>${student.lastname}</td>
                                <td>${student.phone}</td>
                            `;
                            studentTableBody.appendChild(tr);
                        });

                        document.getElementById('studentModal').style.display = 'block';
                    })
                    .catch(error => console.error('Error fetching students:', error)); *@
            });
        });

        const closeStudentBtn = document.querySelector('.close-student');
        const studentModal = document.getElementById('studentModal');

        closeStudentBtn.addEventListener('click', function() {
            studentModal.style.display = 'none';
        });

        window.addEventListener('click', function(event) {
            if (event.target == studentModal) {
                studentModal.style.display = 'none';
            }
        });
    });
</script>
<script>
        var modal = document.getElementById("myModal");
        var btn = document.getElementById("openModalBtn");
        var span = document.getElementsByClassName("close");

        btn.onclick = function() {
            modal.style.display = "block";
        }
        span.onclick = function() {
            modal.style.display = "none";
        }
        window.onclick = function(event) {
            if (event.target == modal) {
              modal.style.display = "none";
            }
        }
</script>
<script>
    var deleteModal = document.getElementById("deleteModal");
    var deleteBtn = document.getElementById("deleteModalBtn");
    var closeBtn = document.getElementsByClassName("close")[1];

    deleteBtn.onclick = function() {
        deleteModal.style.display = "block";
    }
    
    closeBtn.onclick = function() {
        deleteModal.style.display = "none";
    }

    window.onclick = function(event) {
        if (event.target == deleteModal) {
            deleteModal.style.display = "none";
        }
    }
</script>
<script>
    var assignStudentModal = document.getElementById("assignStudentModal");
var assignBtn = document.getElementById("assignStudentBtn");
var closeAssignBtn = document.getElementsByClassName("close-assign")[0];

assignBtn.onclick = function() {
    assignStudentModal.style.display = "block";
}

closeAssignBtn.onclick = function() {
    assignStudentModal.style.display = "none";
}

window.onclick = function(event) {
    if (event.target == assignStudentModal) {
        assignStudentModal.style.display = "none";
    }
}

document.getElementById("assignStudentForm").onsubmit = function(event) {
    event.preventDefault();

    var groupId = document.getElementById("GroupId").value.trim();
    var studentId = document.getElementById("StudentId").value.trim();

    fetch(`/api/group-students/${groupId}/${studentId}`, {
        method: 'POST'
    })
    .then(response => response.text())
    .then(data => {
        alert(`Assigned Student ${studentId} to Group ${groupId}`);
        assignStudentModal.style.display = "none";
    })
    .catch(error => console.error('Error assigning student:', error));
};
</script>
</html>
